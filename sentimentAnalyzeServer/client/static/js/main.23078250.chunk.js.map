{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","entries","this","props","emotions","map","emotion","index","el","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","style","sendForSentimentAnalysis","ret","url","axios","get","outputStyle","color","fontSize","then","response","data","label","output","catch","err","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.23078250.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n  render() {\n    return (\n      <div>\n        {/*You can remove this line and the line below. */}\n        {/* {JSON.stringify(this.props.emotions)} */}\n        <table className=\"table table-bordered\">\n          <tbody>\n            {\n              //-------Write code to use the .map method that you worked on in the Hands-on React lab to extract the emotions\n\n              //Converts emotions object into an array where each element is another array whose elements are the key and property\n              Object.entries(this.props.emotions).map((emotion, index) => {\n                return (\n                  <tr key={index}>\n                    {\n                      emotion.map((el, index) => {\n                        return <td key={index}>{el}</td>\n                      })\n                    }\n                  </tr>\n                );\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {\n    innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n    mode: \"text\",\n    sentimentOutput: [],\n    sentiment: true\n  }\n\n  renderTextArea = () => {\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"url\") {\n      this.setState({\n        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n        mode: \"text\",\n        sentimentOutput: [],\n        sentiment: true\n      })\n    }\n  }\n\n  renderTextBox = () => {\n    let textBoxStyle = {\n      \"max-height\": \"100px\",\n      \"min-height\": \"40px\",\n      \"overflow-y\": \"auto\"\n    }\n    document.getElementById(\"textinput\").value = \"\";\n    if (this.state.mode === \"text\") {\n      this.setState({\n        innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" style={textBoxStyle} />,\n        mode: \"url\",\n        sentimentOutput: [],\n        sentiment: true\n      })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({ sentiment: true });\n    let ret = \"\";\n\n    //used for final build\n    // let url = \".\";\n\n    //used for testing in development\n    let url = \"http://localhost:8080\";\n\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n\n    //Defines CSS style for the sentiment output\n    let outputStyle = {\n      color: \"\",\n      fontSize: \"20px\",\n      \"background-color\": \"lightgrey\"\n    };\n\n    ret.then((response) => {\n      //console.log(response);\n      //----------Include code here to check the sentiment and format the data accordingly----------\n\n      //Extracts label property from JSON result\n      let sentiment = response.data.document.label;\n      if (sentiment === \"positive\") {\n        outputStyle.color = \"green\";\n      } else if (sentiment === \"negative\") {\n        outputStyle.color = \"red\";\n      } else {\n        outputStyle.color = \"yellow\";\n      }\n\n      //Creates div with corresponding sentiment and updates state\n      let output = <div style={outputStyle}>{sentiment}</div>\n      this.setState({ sentimentOutput: output });\n    })\n\n      //Formats and shows error if query was unsuccessful\n      .catch(err => {\n        outputStyle.color = \"black\";\n        let output = <div style={outputStyle}>{`Error: Request could not be processed\\n${err}`}</div>\n        this.setState({ sentimentOutput: output });\n      });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({ sentiment: false });\n    let ret = \"\";\n    //used for final build\n    // let url = \".\";\n\n    //used for testing in development\n    let url = \"http://localhost:8080\";\n\n    if (this.state.mode === \"url\") {\n      url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n    } else {\n      url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n\n    ret.then((response) => {\n\n      //Updates state with the component returned by emotionTable. emotion JSOn object is passed as props\n      this.setState({ sentimentOutput: <EmotionTable emotions={response.data.document.emotion} /> });\n    })\n      .catch(err => {\n        let outputStyle = {\n          color: \"\",\n          fontSize: \"20px\",\n          \"background-color\": \"lightgrey\"\n        };\n        outputStyle.color = \"black\";\n        let output = <div style={outputStyle}>{`Error: Request could not be processed\\n${err}`}</div>\n        this.setState({ sentimentOutput: output });\n      });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n        <br /><br />\n        {this.state.innercomp}\n        <br />\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br />\n        {this.state.sentimentOutput}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}